/// ----------------------------------------------------------------------

/// Components

/// ----------------------------------------------------------------------

@use 'colours';
@use 'corners';
@use 'typography';
@use 'spacing';
@use 'shadows';
@use 'transitions';
@use 'height-to-pad';
 
/// -------------------
/// Flow
/// -------------------
///
/// Flow style components which should match with adjacent components and
/// visually work together, such as buttons & form inputs.
///
$flow-height: 3rem !default;
$flow-border-width: 2px !default;
$flow-line-height: typography.$base-line-height !default;
$flow-font-size: typography.$base-font-size !default;

@mixin flow {
  $padding: height-to-pad.height-to-pad($flow-height, $flow-border-width, $flow-line-height, $flow-font-size);
  
  display: inline-flex;
  box-sizing: border-box;
  line-height: $flow-line-height;
  font-size: $flow-font-size;
  padding-top: map-get($padding, 'top');
  padding-bottom: map-get($padding, 'bottom');
}

/// -------------------
/// Block
/// -------------------
///
/// Block style components which contain other components
///
$block-padding:  spacing.$md !default;

@mixin block {
  display: block;
  padding: $block-padding;
  box-sizing: border-box;
}

/// -------------------
/// Base
/// -------------------
///
/// Base style for component wrapper
///

@mixin base {
  position: relative;

  &:before {
    left: 0;
    right: 0;
    bottom: 0;
    top: 0;
    content: "";
    position: absolute;
    pointer-events: none;
    transition: transitions.$ease;
    transform: scaleX(1);
    border-radius: corners.$base;
    z-index: 2;
    border-bottom: 2px solid rgba(0,0,0,0.05);
    border-top: 2px solid rgba(255,255,255,0.05);
  }

  &:after {
    left: 0;
    right: 0;
    bottom: 0;
    content: "";
    position: absolute;
    transform: scaleX(0);
    transition: transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    border-bottom: 2px solid map-get(colours.$state, 'focus');
    pointer-events: none;
    transition: transitions.$ease;
    z-index: 3;
  }
  
  &:hover:before {
    border-bottom: 2px solid rgba(255,255,255,0.05);
    border-radius: 0;
    transform: scaleX(1);
  }

  &--focus {
    &:hover:before {
      transform: scaleX(0);
    }
    &:before {
      transform: scaleX(0);
      border-radius: corners.$base corners.$base 0 0;
      border-top: 1px solid rgba(0,0,0,0.1);
    }
    &:after {
      transform: scaleX(1);
    }
  }

  .field--error &:before {
    border-bottom: solid 2px map-get(colours.$state, 'error');
  }

  .field--warning &:before {
    border-bottom: solid 2px map-get(colours.$state, 'warning');
  }

  .field--success &:before {
    border-bottom: solid 2px map-get(colours.$state, 'success');
  }
}

/// -------------------
/// Interactive
/// -------------------
///
/// Interactive style
///
@mixin interactive {
  cursor: pointer;
  position: relative;
}