/// ----------------------------------------------------------------------

/// Padding height 

/// ----------------------------------------------------------------------

///
/// Get two padding values to set an element's height using padding instead of fixed height. 
/// Why is this useful? Consider the following:
///
///   <button style={{ height: '30px' }}>Button</button>
///   <input style={{ height: '30px' }} />
///
/// You might be surprised to know that these components will not actually render
/// as the same height - try it in your browser. You will see the button renders as 30px, 
/// but the input is 36px - long story short; it's one of those weird browser quirks ü§∑‚Äç. 
/// This function basically just makes it easy to ensures component heights are consistent.
///
/// For example, to make a button and input of the same height of 30px:
///
/// @example scss
///   $padding: height-to-pad($height: 30px, $border-width: 0, $line-height: 1, $font-size: 1rem, $offset-y: .5);
///
///   .button {
///     border-width: 0;
///     line-height: 1;
///     font-size: 1rem;
///     padding-top: map-get($padding, 'top');
///     padding-bottom: map-get($padding, 'bottom');
///   }
///
///   .input {
///     border-width: 0;
///     line-height: 1;
///     font-size: 1rem;
///     padding-top: map-get($padding, 'top');
///     padding-bottom: map-get($padding, 'bottom');
///   }
///
/// @param {Number} $x
/// The height in px
///
/// @param {Number} $border-width
/// The border width, if any (must also be set in component CSS)
///
/// @param {Number} $line-height
/// The line-height of the element (must also be set in component CSS)
///
/// @param {Number} $font-size
/// The font-size of the element (must also be set in component CSS)
///
/// @param {Number} $offset-y
/// The vertical positioning of the text - a number from 0 to 1
///
/// @return {Object}
/// Either a value in REMs (using px to rem)
///
@function height-to-pad($height, $border-width, $line-height, $font-size, $offset-y: .5) {
  $height: rem($height);
  $border-width: rem($border-width);
  $font-size: rem($font-size);
  $text-box: $font-size * $line-height;
  
  $total-pad: $height - ($border-width * 2);

  $y1: ($total-pad / 2) - ($text-box * $offset-y);
  $y2: ($total-pad / 2) - ($text-box * (1 - $offset-y));

  $values: ('top': $y1, 'bottom': $y2);

  @return $values;
}